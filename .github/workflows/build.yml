
# This workflow will install Python dependencies and run tests on
# windows and linux systems with a variety of Python versions

# For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI/CD

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *' # daily

jobs:
  build:
    name: py${{ matrix.python-version }} @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            python-version: '3.9'  # first supported
          - os: "windows-latest"
            python-version: '3.9'  # first supported
          - os: "ubuntu-latest"
            python-version: '3.12'  # latest supported
          - os: "windows-latest"
            python-version: '3.12'  # latest supported
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download test data
        run: |
          wget https://github.com/daberer/ease_grid/releases/download/test-data-v1.0/test_data.zip
          unzip test_data.zip


      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print environment infos
        run: |
          python --version
          pip --version

      - name: Install base package and run tests
        run: |
          pip install setuptools
          pip install -e .[testing]
          pytest    
          
      
      - name: Create artifacts directory
        run: mkdir -p artifacts
        
      - name: Upload Coverage
        run: |
          pip install coveralls && coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
          COVERALLS_PARALLEL: true
          
      - name: Create wheel and dist package
        run: |
          pip install setuptools_scm twine
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            # build whls on windows
            pip install wheel
            python setup.py bdist_wheel --dist-dir artifacts/dist
          else
            # build dist on linux
            python setup.py sdist --dist-dir artifacts/dist
          fi
          ls artifacts/dist
          twine check artifacts/dist/*
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts-py${{ matrix.python-version }}-${{ matrix.os }}
          path: artifacts/*
  coveralls:
    name: Submit Coveralls ðŸ‘š
    needs: build
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
      - name: Finished
        run: |
          pip3 install --upgrade coveralls && coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publish:
    name: Upload to PyPI ðŸš€
    if: startsWith(github.ref, 'refs/tags/v') && startsWith(github.repository, 'TUW-GEO')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Print environment variables
        run: |
          echo "GITHUB_REF = $GITHUB_REF"
          echo "GITHUB_REPOSITORY = $GITHUB_REPOSITORY"
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: Artifacts
          pattern: Artifacts-*
          merge-multiple: true
      - name: Display downloaded files
        run: ls -aR
      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          skip_existing: true
          verbose: true
          verify_metadata: true
          packages_dir: Artifacts/dist/
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }} # this needs to be uploaded to github actions secrets
